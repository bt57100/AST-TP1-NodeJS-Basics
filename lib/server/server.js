// Generated by CoffeeScript 1.12.7
(function() {
  var fs, pug, renderResource, url, user;

  user = require('./user.coffee');

  url = require('url');

  fs = require('fs');

  pug = require('pug');

  renderResource = function(filename, type, res, callback) {
    console.log(type);
    console.log(filename);
    if (type === "html") {
      return pug.renderFile("views/index.pug", {
        pretty: true
      }, function(err, html) {
        if (err) {
          throw err;
        }
        res.writeHead(200, {
          'Content-Type': "text/" + type
        });
        res.write(html);
        return res.end();
      });
    } else if (type === "css") {
      return fs.readFile("public/" + type + "/" + filename, function(err, file) {
        console.log(type);
        console.log(filename);
        if (err) {
          throw err;
        }
        res.writeHead(200, {
          'Content-Type': "text/" + type
        });
        res.write(file);
        return res.end();
      });
    }
  };

  module.exports = {
    logic: function(req, res) {
      var _, directory, filename, filetype, ref;
      url = url.parse(req.url);
      ref = url.pathname.split("/"), _ = ref[0], directory = ref[1], filetype = ref[2], filename = ref[3];
      if (directory === "") {
        directory = "/";
      }
      switch (url.pathname) {
        case "/":
          return renderResource("index.html", "html", res);
        case "save":
          return user.save("testu", "testpwd", function() {
            res.writeHead(201, {
              'Content-Type': "text/plain"
            });
            return res.end("User saved");
          });
        case "get":
          return user.get("testu", function() {
            res.writeHead(200, {
              'Content-Type': "text/plain"
            });
            return res.end("Got the user");
          });
        case "public":
          return renderResource("global.css", "css", res);
        default:
          res.writeHead(404, {
            'Content-Type': "text/plain"
          });
          return res.end("Route not found");
      }
    },
    port: 8888,
    address: '127.0.0.1'
  };

}).call(this);
